Array.newInstance;java.lang.Class[];java.util.Arrays.copyOf;2245;;
Array.newInstance;java.lang.String[];java.util.Arrays.copyOf;2245;;
Array.newInstance;java.lang.Thread[];java.util.Arrays.copyOf;2245;;
Array.newInstance;sun.security.jca.ProviderConfig[];java.util.Arrays.copyOf;2245;;
Class.forName;byte[];sun.security.pkcs.PKCS9Attribute.<clinit>;205;;
Class.forName;java.awt.EventQueue;sun.awt.SunToolkit.initEQ;116;;
Class.forName;java.lang.String[];sun.security.pkcs.PKCS9Attribute.<clinit>;337;;
Class.forName;java.lang.String;sun.security.pkcs.PKCS9Attribute.<clinit>;348;;
Class.forName;java.security.AlgorithmParametersSpi;java.security.Security.getSpiClass;676;;
Class.forName;java.security.interfaces.DSAPrivateKey;java.security.Provider$Service.getKeyClass;1431;;
Class.forName;java.security.interfaces.DSAPublicKey;java.security.Provider$Service.getKeyClass;1431;;
Class.forName;java.security.MessageDigestSpi;java.security.Security.getSpiClass;676;;
Class.forName;java.security.spec.DSAParameterSpec;sun.security.provider.DSAParameters.engineGetParameterSpec;103;;
Class.forName;java.util.Date;sun.security.pkcs.PKCS9Attribute.<clinit>;345;;
Class.forName;java.util.logging.LoggingProxyImpl;sun.util.logging.LoggingSupport$1.run;54;;
Class.forName;org.dacapo.harness.Sunflow;org.dacapo.harness.TestHarness.findClass;281;;
Class.forName;org.sunflow.Benchmark;org.dacapo.harness.Sunflow.<init>;30;;
Class.forName;sun.net.www.protocol.jar.Handler;java.net.URL.getURLStreamHandler;1191;;
Class.forName;sun.nio.fs.LinuxFileSystemProvider;sun.nio.fs.DefaultFileSystemProvider$1.run;47;;
Class.forName;sun.security.pkcs.SignerInfo[];sun.security.pkcs.PKCS9Attribute.<clinit>;346;;
Class.forName;sun.security.provider.DSAKeyFactory;java.security.Provider$Service.getImplClass;1279;;
Class.forName;sun.security.provider.DSAParameters;java.security.Provider$Service.getImplClass;1279;;
Class.forName;sun.security.provider.DSA$SHA1withDSA;java.security.Provider$Service.getImplClass;1279;;
Class.forName;sun.security.provider.NativePRNG;java.security.Provider$Service.getImplClass;1279;;
Class.forName;sun.security.provider.SHA;java.security.Provider$Service.getImplClass;1279;;
Class.forName;sun.security.provider.Sun;sun.security.jca.Providers.getSunProvider;100;;
Class.forName;sun.security.provider.X509Factory;java.security.Provider$Service.getImplClass;1279;;
Class.forName;sun.security.util.ObjectIdentifier;sun.security.pkcs.PKCS9Attribute.<clinit>;342;;
Class.forName;sun.security.x509.CertificateExtensions;sun.security.pkcs.PKCS9Attribute.<clinit>;356;;
Class.forName;sun.util.logging.PlatformLogger$DefaultLoggerProxy;sun.util.logging.PlatformLogger.<clinit>;177;;
Class.forName;sun.util.logging.PlatformLogger$JavaLoggerProxy;sun.util.logging.PlatformLogger.<clinit>;180;;
Class.getDeclaredField;<java.math.BigInteger: int[] mag>;java.math.BigInteger.<clinit>;3132;isAccessible=false;
Class.getDeclaredField;<java.math.BigInteger: int signum>;java.math.BigInteger.<clinit>;3130;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;java.util.concurrent.CopyOnWriteArrayList.<clinit>;1334;isAccessible=false;
Class.getDeclaredField;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.util.logging.LoggingSupport$1.run;55;isAccessible=false;
Class.getDeclaredField;<javax.security.auth.x500.X500Principal: sun.security.x509.X500Name thisX500Name>;sun.security.x509.X500Name$1.run;1393;isAccessible=false;
Class.getMethod;<Harness: void main(java.lang.String[])>;sun.launcher.LauncherHelper.getMainMethod;494;isAccessible=false;
Class.getMethod;<java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=false;
Class.getMethod;<java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFileSuffixes()>;javax.imageio.ImageIO.<clinit>;667;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFileSuffixes()>;javax.imageio.ImageIO.<clinit>;674;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFormatNames()>;javax.imageio.ImageIO.<clinit>;665;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFormatNames()>;javax.imageio.ImageIO.<clinit>;672;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getMIMETypes()>;javax.imageio.ImageIO.<clinit>;669;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getMIMETypes()>;javax.imageio.ImageIO.<clinit>;676;isAccessible=false;
Class.getMethod;<org.sunflow.Benchmark: void kernelBegin()>;org.dacapo.harness.Sunflow.<init>;32;isAccessible=false;
Class.getMethod;<org.sunflow.Benchmark: void kernelEnd()>;org.dacapo.harness.Sunflow.<init>;33;isAccessible=false;
Class.getMethod;<org.sunflow.Benchmark: void kernelMain()>;org.dacapo.harness.Sunflow.<init>;31;isAccessible=false;
Class.getMethod;<org.sunflow.core.ParameterList$InterpolationType: org.sunflow.core.ParameterList$InterpolationType[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=false;
Class.newInstance;java.awt.EventQueue;sun.awt.SunToolkit.initEQ;116;;
Class.newInstance;sun.awt.resources.awt;java.util.ResourceBundle$Control.newBundle;2572;;
Class.newInstance;sun.net.www.protocol.jar.Handler;java.net.URL.getURLStreamHandler;1199;;
Class.newInstance;sun.nio.fs.LinuxFileSystemProvider;sun.nio.fs.DefaultFileSystemProvider$1.run;52;;
Class.newInstance;sun.security.provider.Sun;sun.security.jca.ProviderConfig$2.run;221;;
Class.newInstance;sun.security.provider.Sun;sun.security.jca.Providers.getSunProvider;101;;
Class.newInstance;sun.text.resources.FormatData_en_AU;java.util.ResourceBundle$Control.newBundle;2572;;
Class.newInstance;sun.text.resources.FormatData_en;java.util.ResourceBundle$Control.newBundle;2572;;
Class.newInstance;sun.text.resources.FormatData_en_US;java.util.ResourceBundle$Control.newBundle;2572;;
Class.newInstance;sun.text.resources.FormatData;java.util.ResourceBundle$Control.newBundle;2572;;
Class.newInstance;sun.util.logging.resources.logging;java.util.ResourceBundle$Control.newBundle;2572;;
Class.newInstance;sun.util.resources.CurrencyNames_en_AU;java.util.ResourceBundle$Control.newBundle;2572;;
Class.newInstance;sun.util.resources.CurrencyNames_en_US;java.util.ResourceBundle$Control.newBundle;2572;;
Class.newInstance;sun.util.resources.CurrencyNames;java.util.ResourceBundle$Control.newBundle;2572;;
Constructor.getModifiers;<java.awt.EventQueue: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.awt.resources.awt: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.net.www.protocol.jar.Handler: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.nio.fs.LinuxFileSystemProvider: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.security.provider.Sun: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.FormatData_en_AU: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.FormatData_en_US: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.FormatData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.FormatData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.logging.resources.logging: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.CurrencyNames_en_AU: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.CurrencyNames_en_US: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.CurrencyNames: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<java.awt.EventQueue: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.dacapo.harness.Sunflow: void <init>(org.dacapo.parser.Config,java.io.File)>;org.dacapo.harness.TestHarness.runBenchmark;211;isAccessible=false;
Constructor.newInstance;<org.sunflow.Benchmark: void <init>(int,boolean,boolean,boolean,int)>;org.dacapo.harness.Sunflow.preIteration;52;isAccessible=false;
Constructor.newInstance;<sun.awt.resources.awt: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.net.www.protocol.jar.Handler: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.nio.fs.LinuxFileSystemProvider: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.security.provider.DSAKeyFactory: void <init>()>;java.security.Provider$Service.newInstance;1240;isAccessible=false;
Constructor.newInstance;<sun.security.provider.DSAParameters: void <init>()>;java.security.Provider$Service.newInstance;1240;isAccessible=false;
Constructor.newInstance;<sun.security.provider.DSA$SHA1withDSA: void <init>()>;java.security.Provider$Service.newInstance;1240;isAccessible=false;
Constructor.newInstance;<sun.security.provider.NativePRNG: void <init>()>;java.security.Provider$Service.newInstance;1240;isAccessible=false;
Constructor.newInstance;<sun.security.provider.SHA: void <init>()>;java.security.Provider$Service.newInstance;1240;isAccessible=false;
Constructor.newInstance;<sun.security.provider.Sun: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.security.provider.X509Factory: void <init>()>;java.security.Provider$Service.newInstance;1240;isAccessible=false;
Constructor.newInstance;<sun.text.resources.FormatData_en_AU: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.FormatData_en_US: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.FormatData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.FormatData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.logging.resources.logging: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.CurrencyNames_en_AU: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.CurrencyNames_en_US: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.CurrencyNames: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Field.getDeclaringClass;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=true;
Field.get*;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.util.logging.LoggingSupport$1.run;57;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.misc.Unsafe.fieldOffset;597;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;49;isAccessible=true;
Field.getName;<java.math.BigInteger: int[] mag>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.math.BigInteger: int signum>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.CopyOnWriteArrayList: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<javax.security.auth.x500.X500Principal: java.lang.String CANONICAL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<javax.security.auth.x500.X500Principal: java.lang.String RFC1779>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<javax.security.auth.x500.X500Principal: java.lang.String RFC2253>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<javax.security.auth.x500.X500Principal: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<javax.security.auth.x500.X500Principal: sun.security.x509.X500Name thisX500Name>;java.lang.Class.searchFields;;isAccessible=false;
Method.getModifiers;<Harness: void main(java.lang.String[])>;sun.launcher.LauncherHelper.getMainMethod;503;isAccessible=false;
Method.getName;<Harness: void main(java.lang.String[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: boolean canDecodeInput(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: boolean isOwnReader(javax.imageio.ImageReader)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: java.lang.Class[] getInputTypes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: java.lang.String[] getImageWriterSpiNames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: javax.imageio.ImageReader createReaderInstance()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: javax.imageio.ImageReader createReaderInstance(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: boolean isStandardImageMetadataFormatSupported()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: boolean isStandardStreamMetadataFormatSupported()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getExtraImageMetadataFormatNames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getExtraStreamMetadataFormatNames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFileSuffixes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFormatNames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getMIMETypes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String getNativeImageMetadataFormatName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String getNativeStreamMetadataFormatName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String getPluginClassName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: javax.imageio.metadata.IIOMetadataFormat getImageMetadataFormat(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: javax.imageio.metadata.IIOMetadataFormat getStreamMetadataFormat(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: boolean canEncodeImage(java.awt.image.RenderedImage)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: boolean canEncodeImage(javax.imageio.ImageTypeSpecifier)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: boolean isFormatLossless()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: boolean isOwnWriter(javax.imageio.ImageWriter)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: java.lang.Class[] getOutputTypes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: java.lang.String[] getImageReaderSpiNames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: javax.imageio.ImageWriter createWriterInstance()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: javax.imageio.ImageWriter createWriterInstance(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.sunflow.Benchmark: void execute()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.sunflow.Benchmark: void imageBegin(int,int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.sunflow.Benchmark: void imageEnd()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.sunflow.Benchmark: void imageFill(int,int,int,int,org.sunflow.image.Color)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.sunflow.Benchmark: void imagePrepare(int,int,int,int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.sunflow.Benchmark: void imageUpdate(int,int,int,int,org.sunflow.image.Color[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.sunflow.Benchmark: void kernelBegin()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.sunflow.Benchmark: void kernelEnd()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.sunflow.Benchmark: void kernelMain()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.sunflow.Benchmark: void main(java.lang.String[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.sunflow.Benchmark: void print(org.sunflow.system.UI$Module,org.sunflow.system.UI$PrintLevel,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.sunflow.Benchmark: void taskStart(java.lang.String,int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.sunflow.Benchmark: void taskStop()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.sunflow.Benchmark: void taskUpdate(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.sunflow.core.ParameterList$InterpolationType: org.sunflow.core.ParameterList$InterpolationType valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.sunflow.core.ParameterList$InterpolationType: org.sunflow.core.ParameterList$InterpolationType[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.invoke;<java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=true;
Method.invoke;<java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=true;
Method.invoke;<org.sunflow.Benchmark: void kernelBegin()>;org.dacapo.harness.Sunflow.preIteration;53;isAccessible=false;
Method.invoke;<org.sunflow.Benchmark: void kernelEnd()>;org.dacapo.harness.Sunflow.validate;79;isAccessible=false;
Method.invoke;<org.sunflow.Benchmark: void kernelMain()>;org.dacapo.harness.Sunflow.iterate;65;isAccessible=false;
Method.invoke;<org.sunflow.core.ParameterList$InterpolationType: org.sunflow.core.ParameterList$InterpolationType[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=true;
