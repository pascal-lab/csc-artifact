Array.newInstance;java.lang.String[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.Thread[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.math.BigInteger[];java.util.Arrays.copyOf;3212;;
Array.newInstance;sun.security.jca.ProviderConfig[];java.util.Arrays.copyOf;3212;;
Class.forName;java.security.MessageDigestSpi;java.security.Security.getSpiClass;675;;
Class.forName;org.dacapo.h2.TPCC;org.dacapo.harness.H2.prepare;45;;
Class.forName;org.dacapo.harness.H2;org.dacapo.harness.TestHarness.findClass;281;;
Class.forName;org.h2.Driver;java.sql.DriverManager.isDriverAllowed;556;;
Class.forName;org.h2.Driver;java.util.ServiceLoader$LazyIterator.nextService;370;;
Class.forName;org.h2.Driver;org.dacapo.h2.TPCC.prepare;147;;
Class.forName;org.h2.engine.SessionFactoryEmbedded;org.h2.util.ClassUtils.loadSystemClass;57;;
Class.forName;sun.net.www.protocol.jar.Handler;java.net.URL.getURLStreamHandler;1175;;
Class.forName;sun.security.provider.SHA;java.security.Provider$Service.getImplClass;1634;;
Class.forName;sun.security.provider.SecureRandom;java.security.Provider$Service.getImplClass;1634;;
Class.forName;sun.util.calendar.JulianCalendar;sun.util.calendar.CalendarSystem.forName;167;;
Class.getDeclaredField;<java.lang.invoke.MethodHandle: java.lang.invoke.LambdaForm form>;java.lang.invoke.MethodHandle.<clinit>;1451;isAccessible=false;
Class.getDeclaredField;<java.sql.SQLException: java.sql.SQLException next>;java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl$1.run;323;isAccessible=false;
Class.getDeclaredField;<java.util.Random: java.util.concurrent.atomic.AtomicLong seed>;java.util.Random.<clinit>;1221;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;java.util.concurrent.CopyOnWriteArrayList.<clinit>;1681;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.atomic.AtomicBoolean: int value>;java.util.concurrent.atomic.AtomicBoolean.<clinit>;59;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.atomic.AtomicMarkableReference: java.util.concurrent.atomic.AtomicMarkableReference$Pair pair>;java.util.concurrent.atomic.AtomicMarkableReference.objectFieldOffset;204;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2276;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2278;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: int state>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2270;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node head>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2272;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2274;isAccessible=false;
Class.getMethod;<Harness: void main(java.lang.String[])>;sun.launcher.LauncherHelper.validateMainClass;544;isAccessible=false;
Class.getMethod;<org.dacapo.h2.TPCC: org.dacapo.h2.TPCC make(org.dacapo.parser.Config,java.io.File,java.lang.Boolean,java.lang.Boolean)>;org.dacapo.harness.H2.prepare;46;isAccessible=false;
Class.getMethod;<org.dacapo.h2.TPCC: void iteration(java.lang.String)>;org.dacapo.harness.H2.prepare;49;isAccessible=false;
Class.getMethod;<org.dacapo.h2.TPCC: void postIteration(java.lang.String)>;org.dacapo.harness.H2.prepare;50;isAccessible=false;
Class.getMethod;<org.dacapo.h2.TPCC: void preIteration(java.lang.String)>;org.dacapo.harness.H2.prepare;48;isAccessible=false;
Class.getMethod;<org.dacapo.h2.TPCC: void prepare(java.lang.String)>;org.dacapo.harness.H2.prepare;47;isAccessible=false;
Class.newInstance;org.h2.Driver;java.util.ServiceLoader$LazyIterator.nextService;380;;
Class.newInstance;org.h2.engine.SessionFactoryEmbedded;org.h2.engine.SessionRemote.connectEmbeddedOrServer;241;;
Class.newInstance;sun.net.www.protocol.jar.Handler;java.net.URL.getURLStreamHandler;1184;;
Class.newInstance;sun.security.provider.Sun;sun.security.jca.ProviderConfig$2.run;221;;
Class.newInstance;sun.text.resources.FormatData;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.text.resources.en.FormatData_en;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.text.resources.en.FormatData_en_AU;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.text.resources.en.FormatData_en_US;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.util.calendar.JulianCalendar;sun.util.calendar.CalendarSystem.forName;168;;
Class.newInstance;sun.util.resources.CalendarData;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.util.resources.CurrencyNames;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.util.resources.en.CalendarData_en;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.util.resources.en.CurrencyNames_en_AU;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.util.resources.en.CurrencyNames_en_US;java.util.ResourceBundle$Control.newBundle;2645;;
Constructor.getModifiers;<org.h2.Driver: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.h2.engine.SessionFactoryEmbedded: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.net.www.protocol.jar.Handler: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.security.provider.Sun: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.FormatData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.en.FormatData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.en.FormatData_en_AU: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.en.FormatData_en_US: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.calendar.JulianCalendar: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.CalendarData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.CurrencyNames: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.en.CalendarData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.en.CurrencyNames_en_AU: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.en.CurrencyNames_en_US: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.dacapo.harness.H2: void <init>(org.dacapo.parser.Config,java.io.File)>;org.dacapo.harness.TestHarness.runBenchmark;211;isAccessible=false;
Constructor.newInstance;<org.h2.Driver: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.h2.engine.SessionFactoryEmbedded: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.net.www.protocol.jar.Handler: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.security.provider.SHA: void <init>()>;java.security.Provider$Service.newInstance;1595;isAccessible=false;
Constructor.newInstance;<sun.security.provider.SecureRandom: void <init>()>;java.security.Provider$Service.newInstance;1595;isAccessible=false;
Constructor.newInstance;<sun.security.provider.Sun: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.FormatData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.en.FormatData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.en.FormatData_en_AU: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.en.FormatData_en_US: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.calendar.JulianCalendar: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.CalendarData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.CurrencyNames: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.en.CalendarData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.en.CurrencyNames_en_AU: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.en.CurrencyNames_en_US: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Field.getModifiers;<java.sql.SQLException: java.sql.SQLException next>;java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.<init>;326;isAccessible=false;
Field.getName;<java.lang.invoke.MethodHandle: java.lang.invoke.LambdaForm form>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodHandle: java.lang.invoke.MethodType type>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.sql.SQLException: int vendorCode>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.sql.SQLException: java.lang.String SQLState>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.sql.SQLException: java.sql.SQLException next>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.Random: java.util.concurrent.atomic.AtomicLong seed>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.Random: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.CopyOnWriteArrayList: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicBoolean: int value>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicBoolean: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicBoolean: long valueOffset>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicBoolean: sun.misc.Unsafe unsafe>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicMarkableReference: java.util.concurrent.atomic.AtomicMarkableReference$Pair pair>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int CANCELLED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int CONDITION>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int PROPAGATE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int SIGNAL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node EXCLUSIVE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node SHARED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: int state>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node head>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Method.getModifiers;<Harness: void main(java.lang.String[])>;sun.launcher.LauncherHelper.validateMainClass;557;isAccessible=false;
Method.getName;<Harness: void main(java.lang.String[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.h2.TPCC: int runScript(java.io.InputStream,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.h2.TPCC: int runScript(java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.h2.TPCC: org.dacapo.h2.TPCC make(org.dacapo.parser.Config,java.io.File,java.lang.Boolean,java.lang.Boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.h2.TPCC: void cleanup()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.h2.TPCC: void iteration(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.h2.TPCC: void postIteration(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.h2.TPCC: void preIteration(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.h2.TPCC: void prepare(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.invoke;<org.dacapo.h2.TPCC: org.dacapo.h2.TPCC make(org.dacapo.parser.Config,java.io.File,java.lang.Boolean,java.lang.Boolean)>;org.dacapo.harness.H2.prepare;53;isAccessible=false;
Method.invoke;<org.dacapo.h2.TPCC: void iteration(java.lang.String)>;org.dacapo.harness.H2.iterate;87;isAccessible=false;
Method.invoke;<org.dacapo.h2.TPCC: void postIteration(java.lang.String)>;org.dacapo.harness.H2.postIteration;97;isAccessible=false;
Method.invoke;<org.dacapo.h2.TPCC: void preIteration(java.lang.String)>;org.dacapo.harness.H2.preIteration;77;isAccessible=false;
Method.invoke;<org.dacapo.h2.TPCC: void prepare(java.lang.String)>;org.dacapo.harness.H2.prepare;67;isAccessible=false;
