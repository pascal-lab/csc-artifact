<java.util.ArrayList: java.lang.Object get(int)>
<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>
<java.util.LinkedList: java.lang.Object pop()>
<java.util.LinkedList: java.lang.Object peekFirst()>
<java.util.LinkedList: java.lang.Object peekLast()>
<java.util.LinkedList: java.lang.Object pollFirst()>
<java.util.LinkedList: java.lang.Object pollLast()>
<java.util.LinkedList: java.lang.Object element()>
<java.util.LinkedList: java.lang.Object remove()>
<java.util.LinkedList: java.lang.Object poll()>
<java.util.LinkedList: java.lang.Object peek()>
<java.util.LinkedList: java.lang.Object getFirst()>
<java.util.LinkedList: java.lang.Object getLast()>
<java.util.LinkedList: java.lang.Object removeFirst()>
<java.util.LinkedList: java.lang.Object removeLast()>
<java.util.LinkedList: java.lang.Object get(int)>
<java.util.Arrays$ArrayList: java.lang.Object get(int)>
<java.util.Vector: java.lang.Object set(int,java.lang.Object)>
<java.util.Vector: java.lang.Object get(int)>
<java.util.Vector: java.lang.Object elementAt(int)>
<java.util.Vector: java.lang.Object firstElement()>
<java.util.Vector: java.lang.Object lastElement()>
<java.util.ArrayDeque: java.lang.Object removeFirst()>
<java.util.ArrayDeque: java.lang.Object removeLast()>
<java.util.ArrayDeque: java.lang.Object pollFirst()>
<java.util.ArrayDeque: java.lang.Object pollLast()>
<java.util.ArrayDeque: java.lang.Object getFirst()>
<java.util.ArrayDeque: java.lang.Object getLast()>
<java.util.ArrayDeque: java.lang.Object peekFirst()>
<java.util.ArrayDeque: java.lang.Object peekLast()>
<java.util.ArrayDeque: java.lang.Object remove()>
<java.util.ArrayDeque: java.lang.Object poll()>
<java.util.ArrayDeque: java.lang.Object element()>
<java.util.ArrayDeque: java.lang.Object peek()>
<java.util.ArrayDeque: java.lang.Object pop()>
<java.util.ArrayDeque: java.lang.Object remove()>
<java.util.Stack: java.lang.Object pop()>
<java.util.Stack: java.lang.Object peek()>
<java.util.Stack: java.lang.Object push(java.lang.Object)>
<java.util.SubList: java.lang.Object remove(int)>
<java.util.SubList: java.lang.Object set(int,java.lang.Object)>
<java.util.SubList: java.lang.Object get(int)>
<java.util.Vector: java.lang.Object remove(int)>
<java.util.LinkedList: java.lang.Object remove(int)>
<java.util.LinkedList: java.lang.Object remove()>
<java.util.LinkedList: java.lang.Object remove(java.util.LinkedList$Entry)>
<java.util.AbstractQueue: java.lang.Object remove()>
<java.util.AbstractQueue: java.lang.Object element()>
<java.util.PriorityQueue: java.lang.Object peek()>
<java.util.PriorityQueue: java.lang.Object poll()>
<java.util.ArrayList: java.lang.Object remove(int)>
<java.util.AbstractList: java.lang.Object remove(int)>
<java.util.Collections$CopiesList: java.lang.Object get(int)>
<java.util.Collections$SingletonList: java.lang.Object get(int)>
<java.util.Collections$CheckedList: java.lang.Object get(int)>
<java.util.Collections$SynchronizedList: java.lang.Object get(int)>
<java.util.Collections$EmptyList: java.lang.Object get(int)>
<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
<java.util.Collections$UnmodifiableList: java.lang.Object set(int,java.lang.Object)>
<java.util.Collections$SynchronizedList: java.lang.Object set(int,java.lang.Object)>
<java.util.Collections$CheckedList: java.lang.Object set(int,java.lang.Object)>
<java.util.Collections$AsLIFOQueue: java.lang.Object poll()>
<java.util.Collections$AsLIFOQueue: java.lang.Object remove()>
<java.util.Collections$AsLIFOQueue: java.lang.Object peek()>
<java.util.Collections$AsLIFOQueue: java.lang.Object element()>
<java.util.concurrent.SynchronousQueue: java.lang.Object take()>
<java.util.concurrent.SynchronousQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.SynchronousQueue: java.lang.Object poll()>
<java.util.concurrent.SynchronousQueue: java.lang.Object peek()>
<java.util.Collections$CopiesList: java.lang.Object get(int)>
<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Runnable poll()>
<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Runnable peek()>
<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Runnable take()>
<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Runnable poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Runnable remove()>
<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Runnable element()>
<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Object take()>
<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Object peek()>
<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Object element()>
<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Object poll()>
<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Object remove()>
<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object peek()>
<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>
<java.util.concurrent.DelayQueue: java.util.concurrent.Delayed poll()>
<java.util.concurrent.DelayQueue: java.lang.Object poll()>
<java.util.concurrent.DelayQueue: java.util.concurrent.Delayed take()>
<java.util.concurrent.DelayQueue: java.lang.Object take()>
<java.util.concurrent.DelayQueue: java.util.concurrent.Delayed poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.DelayQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.DelayQueue: java.util.concurrent.Delayed peek()>
<java.util.concurrent.DelayQueue: java.lang.Object peek()>
<java.util.concurrent.ArrayBlockingQueue: java.lang.Object poll()>
<java.util.concurrent.ArrayBlockingQueue: java.lang.Object take()>
<java.util.concurrent.ArrayBlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ArrayBlockingQueue: java.lang.Object peek()>
<java.util.concurrent.LinkedBlockingQueue: java.lang.Object take()>
<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll()>
<java.util.concurrent.LinkedBlockingQueue: java.lang.Object peek()>
<java.util.concurrent.PriorityBlockingQueue: java.lang.Object take()>
<java.util.concurrent.PriorityBlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.PriorityBlockingQueue: java.lang.Object poll()>
<java.util.concurrent.PriorityBlockingQueue: java.lang.Object peek()>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object removeFirst()>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object removeLast()>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object pollFirst()>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object pollLast()>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object takeFirst()>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object takeLast()>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object pollFirst(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object pollLast(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object getFirst()>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object getLast()>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object peekFirst()>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object peekLast()>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object remove()>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object poll()>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object take()>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object element()>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object peek()>
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object pop()>
<java.util.concurrent.ConcurrentSkipListSet: java.lang.Object lower(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListSet: java.lang.Object floor(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListSet: java.lang.Object ceiling(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListSet: java.lang.Object higher(java.lang.Object)>
<java.util.concurrent.ConcurrentSkipListSet: java.lang.Object pollFirst()>
<java.util.concurrent.ConcurrentSkipListSet: java.lang.Object pollLast()>
<java.util.concurrent.ConcurrentSkipListSet: java.lang.Object first()>
<java.util.concurrent.ConcurrentSkipListSet: java.lang.Object last()>
<java.util.TreeSet: java.lang.Object lower(java.lang.Object)>
<java.util.TreeSet: java.lang.Object floor(java.lang.Object)>
<java.util.TreeSet: java.lang.Object ceiling(java.lang.Object)>
<java.util.TreeSet: java.lang.Object higher(java.lang.Object)>
<java.util.TreeSet: java.lang.Object pollFirst()>
<java.util.TreeSet: java.lang.Object pollLast()>
<java.util.TreeSet: java.lang.Object first()>
<java.util.TreeSet: java.lang.Object last()>
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object set(int,java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object remove(int)>
<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object set(int,java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>
<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object remove(int)>
