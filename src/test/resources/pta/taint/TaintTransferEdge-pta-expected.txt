Points-to sets of all variables
[]:<A: void <init>()>/%this -> [[]:NewObj{<TaintTransferEdge: A getSource()>[0@L21] new C}, []:NewObj{<TaintTransferEdge: void main(java.lang.String[])>[0@L3] new B}, []:NewObj{<TaintTransferEdge: void main(java.lang.String[])>[6@L7] new C}]
[]:<A: void transfer(A)>/%this -> [[]:NewObj{<TaintTransferEdge: void main(java.lang.String[])>[6@L7] new C}, []:TaintObj{alloc=<TaintTransferEdge: void main(java.lang.String[])>[3@L4] temp$1 = invokestatic TaintTransferEdge.getSource(),type=C}]
[]:<A: void transfer(A)>/taint -> [[]:NewObj{<TaintTransferEdge: A getSource()>[0@L21] new C}, []:NewObj{<TaintTransferEdge: void main(java.lang.String[])>[0@L3] new B}, []:TaintObj{alloc=<TaintTransferEdge: void main(java.lang.String[])>[3@L4] temp$1 = invokestatic TaintTransferEdge.getSource(),type=C}]
[]:<B: void <init>()>/%this -> [[]:NewObj{<TaintTransferEdge: void main(java.lang.String[])>[0@L3] new B}]
[]:<C: void <init>()>/%this -> [[]:NewObj{<TaintTransferEdge: A getSource()>[0@L21] new C}, []:NewObj{<TaintTransferEdge: void main(java.lang.String[])>[6@L7] new C}]
[]:<C: void sink(A)>/%this -> [[]:NewObj{<TaintTransferEdge: void main(java.lang.String[])>[6@L7] new C}, []:TaintObj{alloc=<TaintTransferEdge: void main(java.lang.String[])>[3@L4] temp$1 = invokestatic TaintTransferEdge.getSource(),type=C}]
[]:<C: void sink(A)>/a -> [[]:NewObj{<TaintTransferEdge: void main(java.lang.String[])>[6@L7] new C}, []:TaintObj{alloc=<TaintTransferEdge: void main(java.lang.String[])>[3@L4] temp$1 = invokestatic TaintTransferEdge.getSource(),type=C}]
[]:<TaintTransferEdge: A getSource()>/temp$0 -> [[]:NewObj{<TaintTransferEdge: A getSource()>[0@L21] new C}]
[]:<TaintTransferEdge: void main(java.lang.String[])>/args -> [[]:EntryPointObj{alloc=<main-arguments>,type=java.lang.String[] in <TaintTransferEdge: void main(java.lang.String[])>}]
[]:<TaintTransferEdge: void main(java.lang.String[])>/b -> [[]:NewObj{<TaintTransferEdge: void main(java.lang.String[])>[0@L3] new B}]
[]:<TaintTransferEdge: void main(java.lang.String[])>/c -> [[]:NewObj{<TaintTransferEdge: void main(java.lang.String[])>[6@L7] new C}]
[]:<TaintTransferEdge: void main(java.lang.String[])>/merge -> [[]:NewObj{<TaintTransferEdge: void main(java.lang.String[])>[6@L7] new C}, []:TaintObj{alloc=<TaintTransferEdge: void main(java.lang.String[])>[3@L4] temp$1 = invokestatic TaintTransferEdge.getSource(),type=C}]
[]:<TaintTransferEdge: void main(java.lang.String[])>/taint -> [[]:NewObj{<TaintTransferEdge: A getSource()>[0@L21] new C}, []:NewObj{<TaintTransferEdge: void main(java.lang.String[])>[0@L3] new B}, []:TaintObj{alloc=<TaintTransferEdge: void main(java.lang.String[])>[3@L4] temp$1 = invokestatic TaintTransferEdge.getSource(),type=C}]
[]:<TaintTransferEdge: void main(java.lang.String[])>/temp$0 -> [[]:NewObj{<TaintTransferEdge: void main(java.lang.String[])>[0@L3] new B}]
[]:<TaintTransferEdge: void main(java.lang.String[])>/temp$1 -> [[]:NewObj{<TaintTransferEdge: A getSource()>[0@L21] new C}, []:TaintObj{alloc=<TaintTransferEdge: void main(java.lang.String[])>[3@L4] temp$1 = invokestatic TaintTransferEdge.getSource(),type=C}]
[]:<TaintTransferEdge: void main(java.lang.String[])>/temp$2 -> [[]:NewObj{<TaintTransferEdge: void main(java.lang.String[])>[6@L7] new C}]

Points-to sets of all static fields

Points-to sets of all instance fields

Points-to sets of all array indexes
[]:EntryPointObj{alloc=<main-arguments>,type=java.lang.String[] in <TaintTransferEdge: void main(java.lang.String[])>}[*] -> [[]:EntryPointObj{alloc=<main-arguments-element>,type=java.lang.String in <TaintTransferEdge: void main(java.lang.String[])>}]

Detected 0 taint flow(s):

